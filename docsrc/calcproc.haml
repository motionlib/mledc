!!!
%head
  %meta{ charset:"utf-8" }
  %script{ src:"https://polyfill.io/v3/polyfill.min.js?features=es6" }
  %script{ id:"MathJax-script", async: 'async', src:"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"}
  %script{ src:"https://www.gstatic.com/charts/loader.js"}

  :css
    body{
      margin:1em;
    }
    p, table {
      font-size:10pt;
    }
    .right{
      text-align:right;
      padding-right:1em;
    }
    h1{
      border-top : solid 2px #bbb;
      border-left : solid 16px #bbb;
      background-color: #f8f8f8;
    }
    h2{
      border-top : solid 2px #bbb;
      border-left : solid 8px #bbb;
      background-color: #f8f8f8;
    }
    h3{
      border-top : solid 1px #bbb;
      border-left : solid 4px #bbb;
      background-color: #f8f8f8;
    }
    h4{
      background-color: #f8f8f8;
    }
    table{
      margin-left:2em;
    }
    p{
      margin-left:1em;
    }
    p.math{
      margin-left:2.5em;
    }
    tr:nth-child(even){
      background:#F2F2F2;
    }
    tr:nth-child(odd){
      background:#d8d8d8;
    }
    th,td{
      padding:5px;
    }
    .barchart{
      padding: 1em;
      margin: 1em;
      background-color: #eee;
      border: solid #888 2px;
    }
    #barchart_material{
      float:right;
    }
    table.heatmaps{
      margin 0 0 0 0;
      page-break-inside: avoid;
    }
    table.heatmaps tr{
      background-color:white;
    }
    table.heatmap tr, table.heatmap td{
      font-family:"Arial Narrow";
      font-size:4.5pt;
      width:10pt;
      height:10pt;
      text-align:center;
      padding: 0 0 0 0;
      margin: 0 0 0 0;
    }
    table.heatmap{
      padding: 0 0 0 0;
      margin: 0 0 0 0;
    }
    table.heatmap th{
      font-size:10pt;
      height:15pt;
      padding: 0 0 0 0;
      margin: 0 0 0 0;
    }
    table.heatmap th{
      width:15pt;
      text-align:center;
      max-width:20pt;
    }
    div.vertical{
      padding: 0 0 0 0;
      margin: 0 0 0 0;
      transform: rotate(-90deg);
      width:400pt;
      height:15pt;
      left:-190pt;
      position:relative;
    }
    .table_title{
      text-align:center;
      font-size:12pt;
      font-weight:bold;
    }

  :javascript
    window.MathJax = {
      tex: {
        inlineMath: [['$', '$'], ['\\(', '\\)']]
      }
    }
    google.charts.load('current', { 'packages': ['bar'] });
    google.charts.setOnLoadCallback(drawChart);
    function drawChart() {
      var dataM = google.visualization.arrayToDataTable([
        ['', 'mledc', 'crc32', 'fletcher32', 'fletcher4'],
        ['16bytes × 65536 times', 190.663, 1064.3, 206.25, 918.418],
        ['31bytes × 33824 times', 467.754, 1424.63, 187.395, 664.143],
        ['64bytes × 16384 times', 586.122, 2040.45, 193.521, 489.942],
        ['127bytes × 8256 times', 728.726, 2134.36, 195.22, 400.412],
        ['256bytes × 4096 times', 707.392, 2371.52, 205.932, 351.185],
      ]);

      var dataR = google.visualization.arrayToDataTable([
        ['', 'mledc', 'crc32', 'fletcher32', 'fletcher4'],
        ['16bytes × 65536 times', 1681.4, 6942.43, 1278.99, 2079.07],
        ['31bytes × 33824 times', 1659.79, 7920.89, 962.632, 1588.85],
        ['64bytes × 16384 times', 2424.28, 7716.56, 1914.63, 2650.7],
        ['127bytes × 8256 times', 2397.83, 7633.22, 1750.41, 2783.67],
        ['256bytes × 4096 times', 2306.16, 7584.99, 1657.28, 2608.82],
      ]);

      var draw = function (data, pc, id) {
        var options = {
          hAxis: {
            format: "decimal",
          },
          backgroundColor: "#eee",
          bar: { groupWidth: "80%" },
          bars: 'horizontal', // Required for Material Bar Charts.
          axes: {
            x: {
              0: { side: 'top', label: 'Execution time in μs(' + pc + ')' },
            }
          },
        };
        var chart = new google.charts.Bar(document.getElementById(id));
        chart.draw(data, google.charts.Bar.convertOptions(options));
      };

      draw(dataM, "MacBook Pro", "barchart_mac");
      draw(dataR, "Raspberry Pi 3B+", "barchart_rp");
    }  
  %title
    mledc
%body
  %h1 各種誤り検出符号の説明
  %h2 mledc
  %p
    今回発明した符号。計算内容についてはこの文書の「計算内容」の章を参照。
  %h2 crc32
  %p
    PNG などで用いられている CRC32 の計算をそのまま利用。
  %h2 fletcher32
  %p
    16bit ずつデータを取得したデータ列(符号なし)を $x_i ( i=0..(N-1) )$ とし、
  %p.math
    $a_i = a_{i-1} + x_{i-1}$
    %br
    $b_i = b_{i-1} + a_{i-1}$
  %p
    とする。
    %br
    $a_0, \: b_0$ には適当な初期値を入れる。
  %p
    誤り検出符号の値としては、 $a_N$,\: $b_N$ を $65535$ で割った余りを並べた 32bit 整数を用いる。
  %h2 fletcher32
  %p
    16bit ずつデータを取得したデータ列(符号なし)を $x_i ( i=0..(N-1) )$ とし、
  %p.math
    $a_i = a_{i-1} + x_{i-1}$
    %br
    $b_i = b_{i-1} + a_{i-1}$
    %br
    $c_i = c_{i-1} + b_{i-1}$
    %br
    $d_i = d_{i-1} + c_{i-1}$
  %p
    とする。
    %br
    $a_0, \: b_0, \: c_0, \: d_0$ には適当な初期値を入れる。
  %p
    誤り検出符号の値としては、 $a_N,\: b_N,\: c_N,\: d_N$ を $255$ で割った余りを並べた 32bit 整数を用いる。
  %p
    計算の手続きとしては、 ZFS が利用している fletcher4 とほぼ同じだが、ビット数が異なる。また、最終的な値として剰余を使っているところも違う。

  %h1 計算内容
  %h2 データの取得
  %p
    データは 2byte ずつ取得する。端数がある場合は末尾にもう 1byte ゼロがあることにする。
    %br
    →
    %code 0x12, 0x34, 0x56
    と
    %code 0x12, 0x34, 0x56, 0x00
    の区別はつかない。
  %p
    というわけで、入力バイト数の半分(端数切り上げ)個の、符号なし16ビット整数が手に入る
  %p

  %h2 計算
  %h3 計算に必要な定数
  %p
    以下の定数を必要とする。
  %table
    %tr
      %th 変数名
      %th 説明
      %th 補足
    %tr
      %td
        %code init
      %td 初期値
      %td 2進数で0と1がいい感じに混ざっている値がいいんじゃないかと思う。
    %tr
      %td
        %code mul
      %td 乗数
      %td
        2進数で0と1がいい感じに混ざっている
        %b 素数
        がいいんじゃないかと思う。
  %h3 計算に必要な変数
  %p
    実質的に 32bit 符号なし整数1個。この変数の名前を
    %code c
    とする。
  %h3 初期化
  %p
    %code c
    を
    %code init
    で初期化する
  %h3 更新
  %p
    符号なし16bit整数の入力データ
    %code x
    を受け取り、以下の計算をする:
  %p.math
    $c ← rol(c) \times mul + x$
  %p
    関数 $rol$ は、1bit 左ローテート。数学っぽく書くと以下の通り:
  %p.math
    $ rol(x) = mod( \lfloor x \times 2 + x \div 2^{31} \rfloor,\: 2^{32} ) $
  %p
    関数 $mod$ は剰余関数。数学っぽく書くと以下の通り:
  %p.math
    $ mod(a,\: n) = a - n \lfloor a \div n \rfloor $
  #barchart_material
    #barchart_mac.barchart
    %hr
    #barchart_rp.barchart
  %h1 計算量
  %p
    mledc は、計算内容が簡単な上にメモリアクセスが少ないので、計算量は CRC32 と比べるとだいぶ少ないが、ほぼ足し算しかしていない fletcher32 と比べると遅い。
    %br
    MacBook Pro (13-inch, 2017, Two Thunderbolt 3 ports) だと mledc は fletcher32 にだいぶ負けているが、 Raspberry Pi 3B+ ではそれほど大きな差はない。
  %br{ clear:"all" }
  %h1 誤り検出性能
  %p
    乱数で 1〜255 バイトのデータ列を作り、そこにノイズを付加し、約1.5億回の試行を行った。
    %br
    誤り検出に失敗した回数は下表の通り：
  %table
    %tr
      %th 誤り検出符号
      %th 誤り検出失敗回数
      %th 誤り検出失敗率(百万分率)
      %th 誤り検出失敗率の逆数
    -[["mledc", 155374419,5],["crc32", 155374424,0],["fletcher32", 155374306,118],["fletcher4",155361299,13125]].each do |name,ok,ng|
      %tr
        %th=name
        %td.right=ng
        %td.right="%.4f" % (ng*1e6/(ok+ng))
        %td.right=( ng==0 ? "n/a" : ((ok+ng)/ng).round((ok+ng)/ng<1e5 ? -3 : -4).to_j )
  %p
    crc32 は流石。
    %br
    mledc は 5ミス。fletcher32 と比べると20倍ぐらい良かった。
    %br
    今回の更新で増やした fletcher4 は、非常に悪かった。速度と誤り検出能力の両面で fletcher32 に負けているので、採用はない。
  %h2 データ長・誤りビット数・検出失敗数
  %p
    データ長を、16byte〜64byte。誤りビット数を 1bit〜16bit まで変化させ、誤り検出失敗数を調査した。
    %br
    対象とした誤り検出符号は、 mledc と fletcher32。
    %br
    各条件で 100万回 試行した。
    %br
    結果は下表の通り：
  %table.heatmaps
    %tr
      -%i(mledc f32).each do |code|
        %td
          %p.table_title={mledc:"mledc", f32:"fletcher32" }[code]
          %table.heatmap
            -ncs,lens,data=load_data()
            %tr
              %td
              %th{colspan:(ncs[1]-ncs[0]+1)}
                ノイズのビット数。左端が #{ncs[0]}。右端が#{ncs[1]}。
            -(lens[0]..lens[1]).each do |len|
              %tr
                -if len==lens[0]
                  %th.vertical{ rowspan:(lens[1]-lens[0]+1)}
                    .vertical
                      データ長。上端が #{lens[0]} bytes。下端が #{lens[1]} bytes。
                -(ncs[0]..ncs[1]).each do |nc|
                  - ngcount = data["#{nc}/#{len}"][code][1]
                  %td{ style:"background-color:#{col(ngcount)}" }=ngcount

